name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        run: |
          # Get the tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # Generate release notes from commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD --reverse)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed
          
          $COMMITS
          
          ## Installation
          
          \`\`\`bash
          # Clone and build
          git clone <repository-url>
          cd metis
          git checkout $TAG_NAME
          cargo build --release
          
          # MCP server binary will be at:
          # target/release/metis-mcp-server
          \`\`\`
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${TAG_NAME}
          EOF

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}

  publish-crate:
    name: Publish to Crates.io
    needs: create-release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref_name, '-') }} # Only publish stable releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install angreal
        run: pip install 'angreal>=2'

      - name: Run tests before publish
        run: angreal test

      - name: Publish metis-core to crates.io
        run: |
          cd metis-core
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true # Allow failure if already published

      - name: Wait for crates.io index update
        run: sleep 30

      - name: Publish metis-mcp-server to crates.io
        run: |
          cd metis-mcp-server
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true # Allow failure if already published