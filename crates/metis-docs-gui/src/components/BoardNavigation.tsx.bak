import React from 'react';
import { ProjectConfig } from '../lib/tauri-api';

export type BoardType = 'vision' | 'strategy' | 'initiative' | 'task' | 'adr' | 'backlog';

export interface BoardNavigationProps {
  currentBoard: BoardType;
  onBoardChange: (board: BoardType) => void;
  projectConfig?: ProjectConfig | null;
  documentCounts?: {
    vision: number;
    strategy: number;
    initiative: number;
    task: number;
    adr: number;
    backlog: number;
  };
}

export const BoardNavigation: React.FC<BoardNavigationProps> = ({
  currentBoard,
  onBoardChange,
  projectConfig,
  documentCounts,
}) => {
  const boardConfigs = [
    {
      id: 'vision' as BoardType,
      label: 'Vision',
      description: 'Strategic direction and outcomes',
      count: documentCounts?.vision || 0,
    },
    {
      id: 'strategy' as BoardType,
      label: 'Strategy',
      description: 'Coordinated approaches to achieve vision',
      count: documentCounts?.strategy || 0,
    },
    {
      id: 'initiative' as BoardType,
      label: 'Initiative',
      description: 'Concrete projects and capabilities',
      count: documentCounts?.initiative || 0,
    },
    {
      id: 'task' as BoardType,
      label: 'Task',
      description: 'Individual work items',
      count: documentCounts?.task || 0,
    },
    {
      id: 'adr' as BoardType,
      label: 'ADR',
      description: 'Architectural decisions',
      count: documentCounts?.adr || 0,
    },
    {
      id: 'backlog' as BoardType,
      label: 'Backlog',
      description: 'Unassigned work items',
      count: documentCounts?.backlog || 0,
    },
  ];

  // Filter boards based on project configuration
  const enabledBoards = boardConfigs.filter(board => {
    if (!projectConfig) return true; // Show all if config not loaded yet
    
    switch (board.id) {
      case 'vision':
      case 'task':
      case 'adr':
      case 'backlog':
        return true; // Always enabled
      case 'strategy':
        return projectConfig.strategies_enabled;
      case 'initiative':
        return projectConfig.initiatives_enabled;
      default:
        return false;
    }
  });

  return (
    <div className="border-b border-primary bg-elevated">
      <div className="px-6 py-4">
        <nav className="flex" style={{ gap: '3rem' }}>
          {enabledBoards.map((board) => (
            <div
              key={board.id}
              onClick={() => onBoardChange(board.id)}
              className={`
                cursor-pointer flex items-center text-2xl font-semibold transition-colors
                ${currentBoard === board.id
                  ? 'text-interactive-primary border-t-2 border-b-2 border-interactive-primary'
                  : 'text-secondary hover:text-primary'
                }`}
              style={{ padding: '1rem 1.5rem' }}
              title={board.description}
            >
              <span>{board.label}</span>
            </div>
          ))}
        </nav>
      </div>
    </div>
  );
};