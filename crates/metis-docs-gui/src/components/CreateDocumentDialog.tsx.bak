import React, { useState } from 'react';
import { createDocument, CreateDocumentRequest } from '../lib/tauri-api';
import { BoardType } from './BoardNavigation';
import { useTheme } from '../contexts/ThemeContext';

export interface CreateDocumentDialogProps {
  isOpen: boolean;
  onClose: () => void;
  boardType: BoardType;
  onDocumentCreated: () => void;
}

export const CreateDocumentDialog: React.FC<CreateDocumentDialogProps> = ({
  isOpen,
  onClose,
  boardType,
  onDocumentCreated,
}) => {
  const { theme } = useTheme();
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [complexity, setComplexity] = useState('m');
  const [riskLevel, setRiskLevel] = useState('medium');
  const [ticketType, setTicketType] = useState('feature');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!title.trim()) {
      setError('Title is required');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const request: CreateDocumentRequest = {
        document_type: boardType,
        title: title.trim(),
        ...(boardType === 'initiative' && { complexity }),
        ...(boardType === 'strategy' && { risk_level: riskLevel }),
      };

      console.log('Creating document with request:', request);
      const result = await createDocument(request);
      console.log('Create document result:', result);
      
      // Reset form and close dialog
      setTitle('');
      setDescription('');
      setComplexity('m');
      setRiskLevel('medium');
      setTicketType('feature');
      onDocumentCreated();
      onClose();
    } catch (err) {
      console.error('Create document error:', err);
      setError(err instanceof Error ? err.message : 'Failed to create document');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setTitle('');
    setDescription('');
    setComplexity('m');
    setRiskLevel('medium');
    setTicketType('feature');
    setError(null);
    onClose();
  };

  if (!isOpen) return null;

  const getDocumentTypeLabel = (type: BoardType) => {
    switch (type) {
      case 'vision':
        return 'Vision';
      case 'strategy':
        return 'Strategy';
      case 'initiative':
        return 'Initiative';
      case 'task':
        return 'Task';
      case 'adr':
        return 'ADR (Architectural Decision Record)';
      case 'backlog':
        return 'Backlog Item';
      default:
        return 'Document';
    }
  };

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center"
      style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0 }}
    >
      {/* Backdrop */}
      <div 
        className="absolute inset-0 transition-opacity"
        style={{ backgroundColor: theme.colors.background.overlay || 'rgba(0, 0, 0, 0.85)' }}
        onClick={handleClose}
      />
      
      {/* Dialog */}
      <div 
        className="relative shadow-2xl p-8 z-10"
        style={{
          backgroundColor: theme.colors.background.elevated,
          border: `3px solid ${theme.colors.interactive.primary}`,
          borderRadius: '24px',
          width: '500px',
          maxWidth: '90vw',
          maxHeight: '90vh',
          overflowY: 'auto',
          boxShadow: `0 25px 50px -12px rgba(0, 0, 0, 0.5), 0 0 0 1px ${theme.colors.interactive.primary}20`
        }}
      >
        <div className="flex items-center justify-between mb-6">
          <h2 
            className="text-xl font-bold"
            style={{ color: theme.colors.text.primary }}
          >
            Create New {getDocumentTypeLabel(boardType)}
          </h2>
          <button
            onClick={handleClose}
            className="font-bold transition-colors p-6 rounded-lg"
            style={{ 
              color: theme.colors.text.secondary,
              backgroundColor: 'transparent',
              border: 'none',
              fontSize: '2rem',
              lineHeight: '1'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.backgroundColor = theme.colors.background.secondary;
              e.currentTarget.style.color = theme.colors.text.primary;
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.backgroundColor = 'transparent';
              e.currentTarget.style.color = theme.colors.text.secondary;
            }}
          >
            Ã—
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="title" className="block text-sm font-semibold mb-2" style={{ color: theme.colors.text.primary }}>
              Title *
            </label>
            <input
              type="text"
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full px-4 py-3 rounded-lg focus:outline-none focus:ring-2 text-lg font-medium transition-all"
              style={{
                backgroundColor: theme.colors.background.primary,
                border: `2px solid ${theme.colors.border.primary}`,
                color: theme.colors.text.primary
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = theme.colors.interactive.primary;
                e.currentTarget.style.boxShadow = `0 0 0 3px ${theme.colors.interactive.primary}20`;
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = theme.colors.border.primary;
                e.currentTarget.style.boxShadow = 'none';
              }}
              placeholder={`Enter ${getDocumentTypeLabel(boardType).toLowerCase()} title...`}
              disabled={loading}
            />
          </div>

          <div>
            <label htmlFor="description" className="block text-sm font-semibold mb-2" style={{ color: theme.colors.text.primary }}>
              Description
            </label>
            <textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows={3}
              className="w-full px-4 py-3 rounded-lg focus:outline-none focus:ring-2 resize-none font-medium transition-all"
              style={{
                backgroundColor: theme.colors.background.primary,
                border: `2px solid ${theme.colors.border.primary}`,
                color: theme.colors.text.primary
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = theme.colors.interactive.primary;
                e.currentTarget.style.boxShadow = `0 0 0 3px ${theme.colors.interactive.primary}20`;
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = theme.colors.border.primary;
                e.currentTarget.style.boxShadow = 'none';
              }}
              placeholder="Brief description of what this accomplishes..."
              disabled={loading}
            />
          </div>

          {boardType === 'initiative' && (
            <div>
              <label htmlFor="complexity" className="block text-sm font-semibold mb-2" style={{ color: theme.colors.text.primary }}>
                Complexity
              </label>
              <select
                id="complexity"
                value={complexity}
                onChange={(e) => setComplexity(e.target.value)}
                className="w-full px-4 py-3 rounded-lg focus:outline-none focus:ring-2 font-medium transition-all"
                style={{
                  backgroundColor: theme.colors.background.primary,
                  border: `2px solid ${theme.colors.border.primary}`,
                  color: theme.colors.text.primary
                }}
                onFocus={(e) => {
                  e.currentTarget.style.borderColor = theme.colors.interactive.primary;
                  e.currentTarget.style.boxShadow = `0 0 0 3px ${theme.colors.interactive.primary}20`;
                }}
                onBlur={(e) => {
                  e.currentTarget.style.borderColor = theme.colors.border.primary;
                  e.currentTarget.style.boxShadow = 'none';
                }}
                disabled={loading}
              >
                <option value="xs">XS - Very Simple (1-2 days)</option>
                <option value="s">S - Simple (3-5 days)</option>
                <option value="m">M - Medium (1-2 weeks)</option>
                <option value="l">L - Large (3-4 weeks)</option>
                <option value="xl">XL - Very Large (1-2 months)</option>
              </select>
            </div>
          )}


          {error && (
            <div className="mb-4 text-sm break-words" style={{ color: theme.colors.border.error || '#ef4444' }}>
              {error}
            </div>
          )}

          {boardType === 'strategy' && (
            <div>
              <label htmlFor="riskLevel" className="block text-sm font-semibold mb-2" style={{ color: theme.colors.text.primary }}>
                Risk Level
              </label>
              <select
                id="riskLevel"
                value={riskLevel}
                onChange={(e) => setRiskLevel(e.target.value)}
                className="w-full px-4 py-3 rounded-lg focus:outline-none focus:ring-2 font-medium transition-all"
                style={{
                  backgroundColor: theme.colors.background.primary,
                  border: `2px solid ${theme.colors.border.primary}`,
                  color: theme.colors.text.primary
                }}
                onFocus={(e) => {
                  e.currentTarget.style.borderColor = theme.colors.interactive.primary;
                  e.currentTarget.style.boxShadow = `0 0 0 3px ${theme.colors.interactive.primary}20`;
                }}
                onBlur={(e) => {
                  e.currentTarget.style.borderColor = theme.colors.border.primary;
                  e.currentTarget.style.boxShadow = 'none';
                }}
                disabled={loading}
              >
                <option value="low">Low - Well understood, minimal uncertainty</option>
                <option value="medium">Medium - Some unknowns, manageable risk</option>
                <option value="high">High - Significant unknowns, requires exploration</option>
              </select>
            </div>
          )}

          {boardType === 'backlog' && (
            <div>
              <label htmlFor="ticketType" className="block text-sm font-semibold mb-2" style={{ color: theme.colors.text.primary }}>
                Ticket Type
              </label>
              <select
                id="ticketType"
                value={ticketType}
                onChange={(e) => setTicketType(e.target.value)}
                className="w-full px-4 py-3 rounded-lg focus:outline-none focus:ring-2 font-medium transition-all"
                style={{
                  backgroundColor: theme.colors.background.primary,
                  border: `2px solid ${theme.colors.border.primary}`,
                  color: theme.colors.text.primary
                }}
                onFocus={(e) => {
                  e.currentTarget.style.borderColor = theme.colors.interactive.primary;
                  e.currentTarget.style.boxShadow = `0 0 0 3px ${theme.colors.interactive.primary}20`;
                }}
                onBlur={(e) => {
                  e.currentTarget.style.borderColor = theme.colors.border.primary;
                  e.currentTarget.style.boxShadow = 'none';
                }}
                disabled={loading}
              >
                <option value="feature">Feature - New functionality or enhancement</option>
                <option value="bug">Bug - Something that needs to be fixed</option>
                <option value="tech-debt">Tech Debt - Code improvement or refactoring</option>
                <option value="general">General - Documentation, process, or other work</option>
              </select>
            </div>
          )}

          <div className="flex justify-center pt-6">
            <button
              type="submit"
              className="px-12 py-5 rounded-2xl transition-all font-semibold text-xl"
              style={{
                backgroundColor: loading || !title.trim() ? theme.colors.background.tertiary : theme.colors.interactive.primary,
                color: loading || !title.trim() ? theme.colors.text.tertiary : theme.colors.text.inverse,
                border: `2px solid ${loading || !title.trim() ? theme.colors.border.secondary : theme.colors.interactive.primary}`,
                cursor: loading || !title.trim() ? 'not-allowed' : 'pointer',
                opacity: loading || !title.trim() ? 0.6 : 1
              }}
              onMouseEnter={(e) => {
                if (!loading && title.trim()) {
                  e.currentTarget.style.backgroundColor = theme.colors.interactive.primaryHover || theme.colors.interactive.primary;
                  e.currentTarget.style.transform = 'translateY(-1px)';
                  e.currentTarget.style.boxShadow = `0 8px 25px -8px ${theme.colors.interactive.primary}40`;
                }
              }}
              onMouseLeave={(e) => {
                if (!loading && title.trim()) {
                  e.currentTarget.style.backgroundColor = theme.colors.interactive.primary;
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = 'none';
                }
              }}
              disabled={loading || !title.trim()}
            >
              {loading ? 'Creating...' : `Create ${getDocumentTypeLabel(boardType)}`}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};