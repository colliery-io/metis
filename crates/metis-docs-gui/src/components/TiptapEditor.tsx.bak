import React from 'react';
import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Placeholder from '@tiptap/extension-placeholder';
import Typography from '@tiptap/extension-typography';
import { Markdown } from 'tiptap-markdown';
import matter from 'gray-matter';

export interface TiptapEditorProps {
  content: string;
  onChange: (content: string) => void;
  placeholder?: string;
  className?: string;
  editable?: boolean;
}

export const TiptapEditor: React.FC<TiptapEditorProps> = ({
  content,
  onChange,
  placeholder = 'Start writing...',
  className = '',
  editable = true,
}) => {
  const initialContentSet = React.useRef(false);
  const lastContentProp = React.useRef(content);

  // Process content to separate frontmatter from markdown
  const processedContent = React.useMemo(() => {
    try {
      // Use gray-matter to parse frontmatter
      const parsed = matter(content);
      // Return just the markdown content, trimmed of any leading whitespace
      return parsed.content.trim();
    } catch (error) {
      console.error('Error parsing frontmatter:', error);
      // If gray-matter fails, try manual frontmatter removal
      const lines = content.split('\n');
      if (lines[0] === '---') {
        const endIndex = lines.findIndex((line, index) => index > 0 && line === '---');
        if (endIndex > 0) {
          return lines.slice(endIndex + 1).join('\n').trim();
        }
      }
      return content;
    }
  }, [content]);

  const editor = useEditor({
    content: '',
    extensions: [
      StarterKit.configure({
        heading: { levels: [1, 2, 3, 4, 5, 6] }
      }),
      Placeholder.configure({
        placeholder,
      }),
      Typography,
      Markdown.configure({
        html: true,
        tightLists: true,
        bulletListMarker: '-'
      })
    ],
    onCreate: ({ editor }) => {
      // Load content when editor is ready
      if (processedContent) {
        setTimeout(() => {
          if (editor && processedContent) {
            editor.commands.setContent(processedContent);
            initialContentSet.current = true;
          }
        }, 50);
      }
    },
    onUpdate: ({ editor }) => {
      // Get markdown content from the editor
      const storage = editor.storage as any;
      const markdownContent = storage.markdown?.getMarkdown() || editor.getHTML();
      onChange(markdownContent);
    },
  });

  // Only set content when it's a new document (content prop changed)
  React.useEffect(() => {
    if (content !== lastContentProp.current) {
      // Content prop changed - this is a new document
      lastContentProp.current = content;
      initialContentSet.current = false;
      
      if (processedContent && editor) {
        editor.commands.setContent(processedContent);
        initialContentSet.current = true;
      }
    }
  }, [content, processedContent, editor]);

  // Control editable state dynamically
  React.useEffect(() => {
    if (editor) {
      editor.setEditable(editable);
    }
  }, [editor, editable]);

  if (!editor) {
    return null;
  }

  return (
    <div className={`tiptap-editor ${className}`}>
      {editable && (
        <div className="tiptap-toolbar border-b border-gray-200 p-2 flex gap-2 bg-gray-50">
          <button
            onClick={() => editor.chain().focus().toggleBold().run()}
            className={`px-2 py-1 rounded text-sm ${
              editor.isActive('bold') ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-100'
            }`}
          >
            Bold
          </button>
          <button
            onClick={() => editor.chain().focus().toggleItalic().run()}
            className={`px-2 py-1 rounded text-sm ${
              editor.isActive('italic') ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-100'
            }`}
          >
            Italic
          </button>
          <button
            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
            className={`px-2 py-1 rounded text-sm ${
              editor.isActive('heading', { level: 1 }) ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-100'
            }`}
          >
            H1
          </button>
          <button
            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
            className={`px-2 py-1 rounded text-sm ${
              editor.isActive('heading', { level: 2 }) ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-100'
            }`}
          >
            H2
          </button>
          <button
            onClick={() => editor.chain().focus().toggleBulletList().run()}
            className={`px-2 py-1 rounded text-sm ${
              editor.isActive('bulletList') ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-100'
            }`}
          >
            Bullet List
          </button>
          <button
            onClick={() => editor.chain().focus().toggleOrderedList().run()}
            className={`px-2 py-1 rounded text-sm ${
              editor.isActive('orderedList') ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-100'
            }`}
          >
            Numbered List
          </button>
          <button
            onClick={() => editor.chain().focus().toggleBlockquote().run()}
            className={`px-2 py-1 rounded text-sm ${
              editor.isActive('blockquote') ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-100'
            }`}
          >
            Quote
          </button>
        </div>
      )}
      <EditorContent 
        editor={editor} 
        className="tiptap-content p-4 min-h-[400px] prose prose-sm max-w-none focus:outline-none"
      />
    </div>
  );
};