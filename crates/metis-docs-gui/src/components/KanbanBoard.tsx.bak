import React, { useState, useEffect } from 'react';
import {
  DndContext,
  DragEndEvent,
  DragOverlay,
  DragStartEvent,
  closestCenter,
  PointerSensor,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import { useProject } from '../contexts/ProjectContext';
import { listDocuments, MetisAPI, DocumentInfo, transitionPhase, getProjectConfig, ProjectConfig } from '../lib/tauri-api';
import { BoardNavigation, BoardType } from './BoardNavigation';
import { KanbanColumn } from './KanbanColumn';
import { CreateDocumentDialog } from './CreateDocumentDialog';
import { DocumentViewer } from './DocumentViewer';
import { DocumentCard } from './DocumentCard';
import { getBoardConfig, getDocumentsByPhase } from '../lib/board-config';
import { useTheme } from '../contexts/ThemeContext';

export interface KanbanBoardProps {
  onBackToProjects: () => void;
}

export const KanbanBoard: React.FC<KanbanBoardProps> = ({ onBackToProjects: _ }) => {
  const { currentProject } = useProject();
  const { theme } = useTheme();
  const [documents, setDocuments] = useState<DocumentInfo[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentBoard, setCurrentBoard] = useState<BoardType>('vision');
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [viewingDocument, setViewingDocument] = useState<DocumentInfo | null>(null);
  const [activeDocument, setActiveDocument] = useState<DocumentInfo | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [projectConfig, setProjectConfig] = useState<ProjectConfig | null>(null);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    })
  );

  useEffect(() => {
    if (!currentProject?.path) return;

    const loadDocuments = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // First ensure the project is loaded in the backend
        await MetisAPI.loadProject(currentProject.path);
        
        // Get project configuration
        const config = await getProjectConfig();
        setProjectConfig(config);
        
        // Then get the documents
        const docs = await listDocuments();
        setDocuments(docs);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load documents');
      } finally {
        setLoading(false);
      }
    };

    loadDocuments();
  }, [currentProject?.path]);

  // Calculate document counts for navigation
  const documentCounts = {
    vision: documents.filter(d => d.document_type === 'vision').length,
    strategy: documents.filter(d => d.document_type === 'strategy').length,
    initiative: documents.filter(d => d.document_type === 'initiative').length,
    task: documents.filter(d => d.document_type === 'task').length,
    adr: documents.filter(d => d.document_type === 'adr').length,
    backlog: documents.filter(d => 
      d.document_type === 'task' && !d.filepath.includes('initiatives/')
    ).length,
  };

  const handleDocumentClick = (document: DocumentInfo) => {
    setViewingDocument(document);
  };

  const handleDocumentCreated = async () => {
    // Reload documents after creation
    if (!currentProject?.path) return;
    
    try {
      setLoading(true);
      setError(null);
      
      await MetisAPI.loadProject(currentProject.path);
      const docs = await listDocuments();
      
      // Force a new array reference to ensure React detects the change
      setDocuments([...docs]);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to reload documents');
    } finally {
      setLoading(false);
    }
  };

  const handleDocumentUpdated = async () => {
    // Reload documents after update
    await handleDocumentCreated();
  };

  const handleDragStart = (event: DragStartEvent) => {
    const { active } = event;
    const document = documents.find(doc => doc.short_code === active.id);
    setActiveDocument(document || null);
    setIsDragging(true);
  };

  const handleDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event;
    setActiveDocument(null);
    setIsDragging(false);

    if (!over || active.id === over.id) {
      return;
    }

    const documentShortCode = active.id as string;
    const newPhase = over.id as string;
    const document = documents.find(doc => doc.short_code === documentShortCode);

    if (!document || document.phase === newPhase) {
      return;
    }

    try {
      // Attempt phase transition
      await transitionPhase(documentShortCode, newPhase);
      
      // Reload documents to reflect the change
      await handleDocumentCreated();
    } catch (error) {
      console.error('Failed to transition document phase:', error);
      // TODO: Show error notification to user
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-64">
        <div style={{ color: theme.colors.text.secondary }}>Loading documents...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div 
        className="rounded-lg p-4 m-6"
        style={{
          backgroundColor: theme.colors.background.secondary,
          border: `1px solid ${theme.colors.border.error}`,
        }}
      >
        <div 
          className="font-medium"
          style={{ color: theme.colors.border.error }}
        >
          Error loading documents
        </div>
        <div 
          className="text-sm mt-1"
          style={{ color: theme.colors.border.error }}
        >
          {error}
        </div>
      </div>
    );
  }

  const boardConfig = getBoardConfig(currentBoard);
  const documentsByPhase = getDocumentsByPhase(documents, currentBoard);

  if (!boardConfig) {
    return (
      <div className="p-6">
        <div style={{ color: theme.colors.border.error }}>Invalid board configuration</div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div 
        className="flex items-center justify-between p-6 border-b"
        style={{
          backgroundColor: theme.colors.background.elevated,
          borderColor: theme.colors.border.primary,
        }}
      >
        <div>
          <h1 
            className="text-2xl font-bold"
            style={{ color: theme.colors.text.primary }}
          >
            {boardConfig.title}
          </h1>
          <p 
            className="text-sm mt-1"
            style={{ color: theme.colors.text.secondary }}
          >
{boardConfig.description}
          </p>
        </div>
        <div className="flex items-center gap-3">
          {currentBoard !== 'vision' && (
            <button
              onClick={() => setShowCreateDialog(true)}
              className="px-12 py-6 rounded-xl transition-colors font-bold"
              style={{
                backgroundColor: theme.colors.interactive.secondary,
                color: theme.colors.interactive.primary,
                border: `2px solid ${theme.colors.interactive.primary}`,
                fontSize: '18px'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = theme.colors.interactive.primary;
                e.currentTarget.style.color = theme.colors.text.inverse;
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = theme.colors.interactive.secondary;
                e.currentTarget.style.color = theme.colors.interactive.primary;
              }}
            >
              + Create Ticket
            </button>
          )}
        </div>
      </div>

      {/* Board Navigation */}
      <BoardNavigation
        currentBoard={currentBoard}
        onBoardChange={setCurrentBoard}
        projectConfig={projectConfig}
        documentCounts={documentCounts}
      />

      {/* Kanban Columns */}
      <div className="flex-1 p-6 overflow-hidden">
        <DndContext
          sensors={sensors}
          collisionDetection={closestCenter}
          onDragStart={handleDragStart}
          onDragEnd={handleDragEnd}
        >
          <div className="h-full flex gap-4 overflow-x-auto">
            {boardConfig.phases.map((phase) => {
              const columnCount = boardConfig.phases.length;
              const minWidth = 180; // Minimum column width
              const availableWidth = `calc((100vw - 320px - ${columnCount * 16}px) / ${columnCount})`; // Account for sidebar, padding, and gaps
              const columnWidth = `max(${minWidth}px, ${availableWidth})`;
              
              return (
                <div 
                  key={phase.key} 
                  className="flex-shrink-0" 
                  style={{ width: columnWidth }}
                >
                  <KanbanColumn
                    title={phase.title}
                    phase={phase.key}
                    documents={documentsByPhase[phase.key] || []}
                    onDocumentClick={handleDocumentClick}
                    emptyMessage={phase.emptyMessage}
                    isDragging={isDragging}
                  />
                </div>
              );
            })}
          </div>
          
          <DragOverlay>
            {activeDocument ? (
              <div className="transform rotate-3 opacity-80">
                <DocumentCard
                  document={activeDocument}
                  onClick={() => {}}
                />
              </div>
            ) : null}
          </DragOverlay>
        </DndContext>
      </div>

      {/* Create Document Dialog */}
      <CreateDocumentDialog
        isOpen={showCreateDialog}
        onClose={() => setShowCreateDialog(false)}
        boardType={currentBoard}
        onDocumentCreated={handleDocumentCreated}
      />

      {/* Document Viewer */}
      <DocumentViewer
        isOpen={viewingDocument !== null}
        onClose={() => setViewingDocument(null)}
        document={viewingDocument}
        onDocumentUpdated={handleDocumentUpdated}
      />
    </div>
  );
};