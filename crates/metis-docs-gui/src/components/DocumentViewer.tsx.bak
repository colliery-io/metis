import React, { useState, useEffect } from 'react';
import { DocumentInfo, DocumentContent, readDocument, updateDocument, MetisAPI } from '../lib/tauri-api';
import { useTheme } from '../contexts/ThemeContext';
import { TiptapEditor } from './TiptapEditor';
import { useProject } from '../contexts/ProjectContext';

export interface DocumentViewerProps {
  isOpen: boolean;
  onClose: () => void;
  document: DocumentInfo | null;
  onDocumentUpdated?: () => void;
}

export const DocumentViewer: React.FC<DocumentViewerProps> = ({
  isOpen,
  onClose,
  document,
  onDocumentUpdated,
}) => {
  const { theme } = useTheme();
  const { currentProject } = useProject();
  const [content, setContent] = useState('');
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [documentContent, setDocumentContent] = useState<DocumentContent | null>(null);
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    if (!document || !isOpen || !currentProject?.path) return;

    const loadDocument = async () => {
      try {
        setLoading(true);
        setError(null);
        setIsEditing(false); // Reset to view mode when opening new document
        
        // Ensure project is loaded in the backend
        await MetisAPI.loadProject(currentProject.path);
        
        console.log('Reading document with short_code:', document.short_code);
        const docContent = await readDocument(document.short_code);
        setDocumentContent(docContent);
        setContent(docContent.content || '');
      } catch (err) {
        console.error('DocumentViewer load error:', err);
        setError(err instanceof Error ? err.message : 'Failed to load document');
      } finally {
        setLoading(false);
      }
    };

    loadDocument();
  }, [document, isOpen, currentProject?.path]);

  const handleSave = async () => {
    if (!document || !currentProject?.path) return;

    try {
      setSaving(true);
      setError(null);
      
      // Ensure project is loaded in the backend
      await MetisAPI.loadProject(currentProject.path);
      
      await updateDocument(document.short_code, content);
      
      // Refresh document content
      const docContent = await readDocument(document.short_code);
      setDocumentContent(docContent);
      
      onDocumentUpdated?.();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save document');
    } finally {
      setSaving(false);
    }
  };

  const handleEditClick = () => {
    setIsEditing(true);
  };

  const handleCancelEdit = () => {
    // Reset content to original
    if (documentContent) {
      setContent(documentContent.content || '');
    }
    setIsEditing(false);
  };

  const handleSaveAndClose = async () => {
    await handleSave();
    setIsEditing(false);
  };

  const handleClose = () => {
    setIsEditing(false);
    setError(null);
    onClose();
  };

  if (!isOpen || !document) return null;

  const getPhaseColor = (phase?: string) => {
    switch (phase) {
      case 'draft':
      case 'todo':
        return theme.colors.status.draft;
      case 'review':
      case 'doing':
      case 'active':
        return theme.colors.status.active;
      case 'published':
      case 'completed':
        return theme.colors.status.completed;
      case 'decided':
        return theme.colors.interactive.primary;
      case 'superseded':
        return theme.colors.interactive.danger;
      default:
        return theme.colors.status.draft;
    }
  };

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center"
      style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0 }}
    >
      {/* Backdrop */}
      <div 
        className="absolute inset-0 transition-opacity"
        style={{ backgroundColor: theme.colors.background.overlay || 'rgba(0, 0, 0, 0.85)' }}
        onClick={handleClose}
      />
      
      {/* Dialog */}
      <div 
        className="relative shadow-2xl z-10"
        style={{
          backgroundColor: theme.colors.background.elevated,
          border: `3px solid ${theme.colors.interactive.primary}`,
          borderRadius: '24px',
          width: '90vw',
          maxWidth: '800px',
          height: '90vh',
          maxHeight: '900px',
          display: 'flex',
          flexDirection: 'column',
          boxShadow: `0 25px 50px -12px rgba(0, 0, 0, 0.5), 0 0 0 1px ${theme.colors.interactive.primary}20`
        }}
      >
        {/* Header */}
        <div 
          className="flex items-center justify-between p-6 border-b"
          style={{ borderColor: theme.colors.border.primary }}
        >
          <div className="flex items-center space-x-4">
            <div>
              <h2 
                className="text-xl font-bold"
                style={{ color: theme.colors.text.primary }}
              >
                {document.title}
              </h2>
              <div className="flex items-center space-x-3 mt-1">
                <span 
                  className="text-sm font-mono"
                  style={{ color: theme.colors.text.secondary }}
                >
                  {document.short_code}
                </span>
                <span
                  className="px-2 py-1 rounded-full text-xs font-medium"
                  style={{
                    backgroundColor: getPhaseColor(document.phase) + '20',
                    color: getPhaseColor(document.phase),
                  }}
                >
                  {document.phase}
                </span>
                <span
                  className="px-2 py-1 rounded text-xs font-medium"
                  style={{
                    backgroundColor: theme.colors.background.secondary,
                    color: theme.colors.text.secondary,
                  }}
                >
                  {document.document_type.toUpperCase()}
                </span>
              </div>
            </div>
          </div>
          
          <div className="flex items-center space-x-3">
            {!isEditing ? (
              <button
                onClick={handleEditClick}
                className="px-6 py-3 rounded-lg transition-all font-semibold"
                style={{
                  backgroundColor: theme.colors.interactive.primary,
                  color: theme.colors.text.inverse,
                  border: `2px solid ${theme.colors.interactive.primary}`
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = theme.colors.interactive.primaryHover || theme.colors.interactive.primary;
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = theme.colors.interactive.primary;
                }}
              >
                Edit
              </button>
            ) : (
              <>
                <button
                  onClick={handleCancelEdit}
                  className="px-4 py-2 rounded-lg transition-all font-medium"
                  style={{
                    backgroundColor: theme.colors.background.secondary,
                    color: theme.colors.text.primary,
                    border: `1px solid ${theme.colors.border.primary}`
                  }}
                  disabled={saving}
                >
                  Cancel
                </button>
                <button
                  onClick={handleSaveAndClose}
                  className="px-6 py-3 rounded-lg transition-all font-semibold"
                  style={{
                    backgroundColor: theme.colors.interactive.primary,
                    color: theme.colors.text.inverse,
                    border: `2px solid ${theme.colors.interactive.primary}`,
                    opacity: saving ? 0.6 : 1
                  }}
                  disabled={saving}
                >
                  {saving ? 'Saving...' : 'Save'}
                </button>
              </>
            )}
            
            <button
              onClick={handleClose}
              className="font-bold transition-colors p-2 rounded-lg"
              style={{ 
                color: theme.colors.text.secondary,
                backgroundColor: 'transparent',
                border: 'none',
                fontSize: '1.5rem',
                lineHeight: '1'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = theme.colors.background.secondary;
                e.currentTarget.style.color = theme.colors.text.primary;
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = 'transparent';
                e.currentTarget.style.color = theme.colors.text.secondary;
              }}
            >
              Ã—
            </button>
          </div>
        </div>

        {/* Content */}
        <div 
          className="flex-1 overflow-hidden"
          style={{ minHeight: 0 }} // Important for flex overflow
        >
          {loading ? (
            <div 
              className="flex items-center justify-center h-full"
              style={{ color: theme.colors.text.secondary }}
            >
              Loading document...
            </div>
          ) : error ? (
            <div 
              className="p-6"
              style={{ color: theme.colors.border.error }}
            >
              Error: {error}
            </div>
          ) : isEditing ? (
            <div className="h-full">
              <TiptapEditor
                content={content}
                onChange={setContent}
              />
            </div>
          ) : (
            <div className="h-full">
              <TiptapEditor
                content={content}
                onChange={() => {}} // No-op for read-only
                editable={false}
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
};